{"version":3,"sources":["InputOption.js","Post.js","firebase.js","Feed.js","HeaderOption.js","Header.js","Sidebar.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["InputOption","Icon","title","color","className","style","Post","name","description","message","photoUrl","timestamp","Avatar","src","ThumbsUpAltOutlinedIcon","ChatOutlinedIcon","ShareOutlinedIcon","SendOutlinedIcon","firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","Feed","useState","input","setInput","posts","setPosts","useEffect","onSnapshot","collection","snapshot","docs","map","doc","data","id","value","onChange","e","target","type","onClick","preventDefault","addDoc","serverTimestamp","then","postRef","console","log","ImageIcon","SubscriptionIcon","EventNoteIcon","CalendarViewDayIcon","HeaderOption","avatar","Header","alt","div","HomeIcon","SupervisorAccountIcon","BusinessCenterIcon","ChatIcon","NotificationsIcon","Sidebar","recentItem","topic","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfa12911.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./InputOption.css\";\r\n\r\n\r\nfunction InputOption({Icon, title, color}) {\r\n    return (\r\n        <div className='inputOption'>\r\n            <Icon style={{color: color}}/>\r\n            <h4>{title}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputOption\r\n","import { Avatar } from '@material-ui/core';\r\nimport { ChatOutlined, SendOutlined, ShareOutlined, ThumbDown, ThumbsUpDownOutlined } from '@material-ui/icons';\r\nimport React from 'react'\r\nimport './Post.css';\r\nimport InputOption from \"./InputOption\"\r\nimport ThumbsUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport ChatOutlinedIcon from '@material-ui/icons/ChatOutlined';\r\nimport ShareOutlinedIcon from '@material-ui/icons/ShareOutlined';\r\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\r\nimport { serverTimestamp, Timestamp } from '@firebase/firestore';\r\n\r\nfunction Post({name, description, message, photoUrl, timestamp}) {\r\n    return (\r\n        <div className='post'>\r\n            <div className=\"post__header\">\r\n                <Avatar src='me.jpg' />\r\n                <div className=\"post__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{description}</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"post__body\">\r\n                <p>{message}</p>\r\n            </div>\r\n\r\n            <div className=\"post__buttons\">\r\n                <InputOption Icon={ThumbsUpAltOutlinedIcon} title='Like'\r\n                color=\"gray\"/>\r\n                <InputOption Icon={ChatOutlinedIcon} title='Comment'\r\n                color=\"gray\"/>\r\n                <InputOption Icon={ShareOutlinedIcon} title='Share'\r\n                color=\"gray\"/>\r\n                <InputOption Icon={SendOutlinedIcon} title='Send'\r\n                color=\"gray\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import {initializeApp} from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA0GLlurLvufeXwj7_b1WjUpsJ_MSbNmgE\",\r\n  authDomain: \"linkedin-clone-b0d40.firebaseapp.com\",\r\n  projectId: \"linkedin-clone-b0d40\",\r\n  storageBucket: \"linkedin-clone-b0d40.appspot.com\",\r\n  messagingSenderId: \"778223915544\",\r\n  appId: \"1:778223915544:web:993cde672f1561cf96696d\"\r\n};\r\n\r\n\r\n\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\nconst db = getFirestore(firebaseApp);\r\n \r\n\r\n\r\nexport {db}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport \"./Feed.css\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport InputOption from './InputOption';\r\nimport SubscriptionIcon from \"@material-ui/icons/Subscriptions\";\r\nimport EventNoteIcon from \"@material-ui/icons/EventNote\";\r\nimport CalendarViewDayIcon from \"@material-ui/icons/CalendarViewDay\";\r\nimport Post from './Post';\r\nimport { db } from './firebase';\r\nimport {onSnapshot,collection, addDoc, orderBy, serverTimestamp} from \"firebase/firestore\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Feed() {\r\n\r\nconst [input, setInput] = useState(\"\");\r\nconst[posts, setPosts] = useState([]);\r\n\r\nuseEffect(() =>{\r\n    const newPost = onSnapshot(collection(db, 'posts',),(snapshot) =>{\r\n    setPosts(snapshot.docs.map(doc => ({...doc.data(), id: doc.id})));\r\n    });\r\n    return newPost\r\n}, []);\r\n\r\n\r\n\r\n\r\nconst sendPost = e =>{\r\n    e.preventDefault(); \r\n\r\n    addDoc(collection(db, 'posts'), {\r\n        name: \"Connor\",\r\n        description: \"Front End Developer\",\r\n        message: input,\r\n        photoUrl:'',\r\n        timestamp: serverTimestamp(),\r\n    }).then(postRef => console.log(\"Document written with ID\", postRef.id));\r\n\r\nsetInput(\"\");    \r\n   \r\n}\r\n\r\n    return (\r\n        <div className='feed'>\r\n            <div className=\"feed__inputContainer\">\r\n                <div className=\"feed__input\">\r\n                    <CreateIcon />\r\n                    <form>\r\n                        <input value={input} onChange={e => setInput(e.target.value)} type=\"text\" />\r\n                        <button onClick={sendPost} type='submit'>Send</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"feed__inputOptions\">\r\n                    <InputOption  Icon={ImageIcon} title='Photo' \r\n                    color='#70B5F9'\r\n                    />\r\n                    <InputOption Icon={SubscriptionIcon} title='Video' \r\n                    color='#E7A33E'\r\n                    />\r\n                    <InputOption Icon={EventNoteIcon} title='Event' \r\n                    color='#C0CBCD'\r\n                    />\r\n                    <InputOption Icon={CalendarViewDayIcon} title='Write Article' \r\n                    color='#7FC15E'\r\n                    />\r\n                </div> \r\n            </div>\r\n            {posts.map(({name, message, description}) =>(\r\n                <Post name={name}\r\n                description={description}\r\n                message={message}\r\n                />\r\n            ))}\r\n\r\n\r\n        \r\n            \r\n            {/* <Post name=\"Connor Deane\"\r\n            description=\"Front End Developer\"\r\n            message=\"This is a test post, hello hello hello\"/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","import { Avatar } from '@material-ui/core';\r\nimport React from 'react'\r\nimport \"./HeaderOption.css\";\r\n\r\nfunction HeaderOption({ avatar, Icon, title }) {\r\n    return (\r\n        <div className=\"headerOption\">\r\n            {Icon && <Icon className='headerOption__icon' />} {/**render out icon if we pass in the icon */}\r\n            {avatar && (\r\n                <Avatar className='headerOption__icon' src={avatar} />\r\n            )}\r\n            <h3 className='headerOption__title'>{title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderOption\r\n","import React from 'react'\r\nimport \"./Header.css\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HeaderOption from './HeaderOption';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\n\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className='header'>\r\n\r\n            <div className=\"header__left\">\r\n                <img src=\"linkedin.svg\" alt=\"linkedin-logo\" />\r\n\r\n\r\n                <div div className=\"header__search\" >\r\n                    <SearchIcon />\r\n                    <input type=\"text\" />\r\n                </div >\r\n            </div >\r\n\r\n\r\n            <div className=\"header__right\">\r\n                <HeaderOption Icon={HomeIcon} title='Home' />\r\n                <HeaderOption Icon={SupervisorAccountIcon} title='My Network' />\r\n                <HeaderOption Icon={BusinessCenterIcon} title='Jobs' />\r\n                <HeaderOption Icon={ChatIcon} title='Messaging' />\r\n                <HeaderOption Icon={NotificationsIcon} title='Notification' />\r\n\r\n                <HeaderOption avatar='me.jpg' title='Me'></HeaderOption>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { Avatar } from '@material-ui/core';\r\nimport React from 'react'\r\nimport \"./Sidebar.css\";\r\n\r\nfunction Sidebar() {\r\n\r\n\r\n    const recentItem = (topic) => (\r\n        <div className=\"sidebar__recentItem\">\r\n            <span className=\"sidebar__hash\">#</span>\r\n            <p>{topic}</p>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebar__top\">\r\n                <img src=\"mountains.png\" alt=\"mountains\" />\r\n                <Avatar className='sidebar__avatar' src='me.jpg' />\r\n                <h2>Connor Deane</h2>\r\n                <h4>enquiries@connordeane.com</h4>\r\n            </div>\r\n            <div className=\"sidebar__stats\">\r\n                <div className=\"sidebar__stat\">\r\n                    <p>Who viewed you</p>\r\n                    <p className='sidebar__statNumber'> 3,456</p>\r\n                </div>\r\n                <div className=\"sidebar__stat\">\r\n                    <p>Views on post</p>\r\n                    <p className='sidebar__statNumber'> 1,123</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__bottom\">\r\n                    <p>Recent</p>\r\n                    {recentItem('reactjs')}\r\n                    {recentItem('programming')}\r\n                    {recentItem('software Engineering')}\r\n                    {recentItem('design')}\r\n                    {recentItem('developer')}\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react';\nimport './App.css';\nimport Feed from './Feed';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      {/*App Body*/}\n      <div className=\"app__body\">\n        <Sidebar />\n        <Feed />\n      </div>\n      {/*Sidebar */}\n      {/*Feed */}\n      {/*Widgets */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}